from fastapi import APIRouter, Depends
from fastapi.exceptions import HTTPException
from supabase import Client

from db.supabase import get_supabase

router = APIRouter(prefix="/storage", tags=["Storage"])

BUCKET_NAME = "scraper-data"


@router.get("/")
async def get_buckets(supabase: Client = Depends(get_supabase)):
    """
    Get a list of buckets."

    Args:
        supabase: Supabase client instance
    Returns:
        List[Dict[str, Any]]: A list of buckets
    """
    buckets = supabase.storage.list_buckets()
    return buckets


@router.post("/upload-sample-folder/{folder_name}", status_code=201)
async def upload_sample_folder(
    folder_name: str,
    supabase: Client = Depends(get_supabase),
):
    """
    Creates a folder named `folder_name` in the 'scraper-data' bucket
    and uploads sample text files into it. Requires user authentication.
    """
    try:
        # --- Define Sample Files ---
        sample_files = {
            "readme.txt": "This is a sample folder generated by the API.",
            "data/file1.csv": "col1,col2\nval1,val2\nval3,val4",
            "data/nested/notes.txt": "Some nested notes here.",
        }

        uploaded_paths = []

        storage = supabase.storage.from_(BUCKET_NAME)

        for relative_path, content in sample_files.items():
            # Construct the full path within the bucket
            # IMPORTANT: Object storage uses '/' as delimiter.
            # No need to "create" the folder explicitly, the path implies it.
            full_path = f"{folder_name}/{relative_path}"

            # Convert string content to bytes
            content_bytes = content.encode("utf-8")

            # Use upload_from_memory (or upload for local files)
            # Pass content_bytes directly
            print(f"Uploading to: {full_path}")
            response = storage.upload(
                path=full_path,
                file=content_bytes,
                # Set content type if known, helps browsers/apps
                file_options={"content-type": "text/plain"},
                # Use upsert=True if you want to overwrite existing files
                # file_options={"content-type": "text/plain", "upsert": "true"}
            )
            uploaded_paths.append(full_path)
            print(f"Successfully uploaded: {full_path}")

        return response

    except HTTPException as e:
        # Re-raise HTTPExceptions (like auth errors)
        raise e
    except Exception as e:
        print(f"An error occurred: {e}")  # Log the actual error server-side
        # Check if the error is from Supabase storage (may need specific exception types)
        # Example: Check for StorageApiError if using a version that raises it
        raise HTTPException(
            status_code=500,
            detail=f"Failed to upload files to Supabase Storage: {str(e)}",
        )
