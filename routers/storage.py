import logging

from fastapi import APIRouter, Depends
from fastapi.exceptions import HTTPException
from supabase import Client

# from supabase.lib.errors import StorageApiError # If available
from db.supabase import UploadRequest, get_supabase, upload_to_bucket
from fb.scraper import scrape_facebook_page

router = APIRouter(prefix="/storage", tags=["Storage"])

BUCKET_NAME = "scraper-data"

# --- Logger Setup ---
log_filename = "storage.log"
# Configure to log to both file and console
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s",
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler(),  # Log to console
    ],
)
logger = logging.getLogger(__name__)
# --- End Logger Setup ---


@router.get("/")
async def get_buckets(supabase: Client = Depends(get_supabase)):
    """
    Get a list of buckets."

    Args:
        supabase: Supabase client instance
    Returns:
        List[Dict[str, Any]]: A list of buckets
    """
    try:
        logger.info("Fetching list of buckets.")
        # list_buckets() in newer versions returns List[Bucket], not List[Dict]
        buckets_list = supabase.storage.list_buckets()
        # Convert to list of dicts for consistent return type if needed, or adjust return type hint
        buckets_data = [
            bucket.dict() for bucket in buckets_list
        ]  # Use .dict() or access attributes
        logger.info(f"Found buckets: {[b['name'] for b in buckets_data]}")
        return buckets_data
    except Exception as e:
        logger.error(f"Error fetching buckets: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, detail=f"Failed to retrieve buckets: {str(e)}"
        )


@router.post("/upload-sample-folder/{folder_name}", status_code=201)
async def upload_sample_folder(
    folder_name: str,
    supabase: Client = Depends(get_supabase),
):
    """
    Creates a folder named `folder_name` in the 'scraper-data' bucket
    and uploads sample text files into it. Requires user authentication.
    """
    if not folder_name or folder_name.isspace():
        raise HTTPException(
            status_code=400, detail="Folder name cannot be empty or just whitespace."
        )

    # Sanitize folder name slightly (optional, depends on requirements)
    # folder_name = folder_name.strip('/') # Avoid leading/trailing slashes if problematic

    logger.info(
        f"Received request to create sample folder: '{folder_name}' in bucket '{BUCKET_NAME}'"
    )
    try:
        sample_files = {
            "readme.txt": "This is a sample folder generated by the API.",
            "data/file1.csv": "col1,col2\nval1,val2\nval3,val4",
            "data/nested/notes.txt": "Some nested notes here.",
            "root_file.txt": "This file is directly in the folder.",
        }

        request_data = UploadRequest(
            bucket=BUCKET_NAME,
            folder=folder_name,
            data=sample_files,
        )

        logger.info(
            f"Constructed upload request: bucket='{request_data.bucket}', folder='{request_data.folder}', files={list(request_data.data.keys())}"
        )

        upload_responses = upload_to_bucket(supabase, request_data)

        logger.info(f"Successfully uploaded sample files to folder '{folder_name}'.")

        return {
            "message": f"Successfully created folder '{folder_name}' and uploaded sample files.",
            "bucket": BUCKET_NAME,
            "folder": folder_name,
            "files_uploaded": [resp["path"] for resp in upload_responses],
        }

    except HTTPException as e:
        logger.error(
            f"HTTPException during sample folder upload to '{folder_name}': {e.detail}",
            exc_info=False,
        )  # Log detail, maybe not full trace
        raise e
    except Exception as e:
        logger.error(
            f"Unexpected error during sample folder upload to '{folder_name}': {e}",
            exc_info=True,
        )
        raise HTTPException(
            status_code=500,
            detail=f"An unexpected error occurred while uploading files: {str(e)}",
        )


@router.post("/upload", status_code=201)
async def upload_to_bucket_endpoint(
    supabase: Client = Depends(get_supabase),
):
    scrape_facebook_page(
        url="https://www.facebook.com/Batangas1ElectricCooperativeInc",
        supabase=supabase,
        # output_html_file="data/bateleco_page.html",
        # output_json_file="data/bateleco_data.json",
        sleep_time=6,
        max_scrolls=20,
        log_file="logs/fb_scraper.log",
    )
    return {"message": "Scraping complete."}
